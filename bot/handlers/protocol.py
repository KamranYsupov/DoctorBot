import calendar
from datetime import datetime, date, time, timedelta

import loguru
from aiogram import types, F, Router
from aiogram.filters import StateFilter, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from asgiref.sync import sync_to_async
from django.utils import timezone

from core import config
from keyboards.inline import get_inline_keyboard
from keyboards.reply import (
    reply_keyboard_remove, 
    get_reply_keyboard,
    reply_cancel_keyboard,
    reply_calendar_keyboard,
)
from schemas.doctor import DoctorCreateSchema
from schemas.protocol import ProtocolCreateSchema
from utils.validators import get_integer_from_string
from utils.protocol import get_timedelta_calendar
from web.doctors.models import Doctor
from web.protocols.models import Protocol

router = Router()


class ProtocolState(StatesGroup):
    patient_name = State()
    drugs = State()
    first_take = State()
    period = State()
    time_to_take = State()
    
    
@router.message(F.text.casefold() == '—Å—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ üìù')
async def start_protocol_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞', reply_markup=reply_cancel_keyboard)    
    await state.set_state(ProtocolState.patient_name)
    
    
@router.message(ProtocolState.patient_name, F.text)
async def process_patient_name(message: types.Message, state: FSMContext):
    patient_name = message.text
    if len(patient_name) > 150:
        return await message.answer(
            '–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤'
        )
    
    await state.update_data(patient_name=patient_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞') 
    await state.set_state(ProtocolState.drugs)
    
    

@router.message(ProtocolState.drugs, F.text)
async def process_drug_name(message: types.Message, state: FSMContext):
    drug_name = message.text
    if len(drug_name) > 150:
        return await message.answer(
            '–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤'
        )
    
    state_data = await state.get_data()
    drugs = state_data.get('drugs')
    if not drugs:
        drugs = []
        
    drugs.append(drug_name) 
    await state.update_data(drugs=drugs)
    
    if len(drugs) > 1:
        return await send_finish_protocol_message(
            message,
            text=f'–ü—Ä–µ–ø–∞—Ä–∞—Ç <b>{drug_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        )
        
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏—ë–º–∞',
        reply_markup=reply_calendar_keyboard,
    ) 
    await state.set_state(ProtocolState.first_take)
    

@router.message(ProtocolState.first_take, F.text)
async def process_first_take(message: types.Message, state: FSMContext):
    now = timezone.now()
    year = now.year
    month = now.month
    day = get_integer_from_string(message.text)
    
    days_count = calendar.monthrange(year, month)[1]
    
    if not day or day > days_count:
        return await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞')
    if day < now.day:
        return await message.answer('–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ —á–∏—Å–ª–∞')
    #if day == now.day:
    #    return await message.answer('–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É')
    
    first_take = date(year, month, day)
    
    await state.update_data(first_take=first_take)
    await message.answer(
        '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–µ–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?',
        reply_markup=reply_cancel_keyboard
    ) 
    await state.set_state(ProtocolState.period)
    
    
@router.message(ProtocolState.period, F.text)
async def process_period(message: types.Message, state: FSMContext):
    period = get_integer_from_string(message.text)
    if not period:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏—ë–º–∞')
        return
    if period > 365:
        await message.answer('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—ë–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 365 –¥–Ω–µ–π')
        return
    
    await state.update_data(period=period)
    await message.answer(
        '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–µ–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?\n\n'
        '–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <em><b>{—á–∞—Å}:{–º–∏–Ω—É—Ç–∞}</b></em>.\n'
        '<b>–ü—Ä–∏–º–µ—Ä:</b> <b><em>12:35</em></b>',
        parse_mode='HTML',
    ) 
    await state.set_state(ProtocolState.time_to_take)
    
    

@router.message(ProtocolState.time_to_take, F.text)
async def process_time_to_take(message: types.Message, state: FSMContext):
    try:
        hour, minute = message.text.split(':')
        time_to_take = (time(int(hour), int(minute)))
    except ValueError or TypeError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
        return 
    
    await state.update_data(time_to_take=time_to_take)
    await send_finish_protocol_message(message)
    
    
@router.callback_query(F.data == 'create_protocol')
async def create_protocol_handler(callback: types.CallbackQuery, state: FSMContext):
    protocol_data = await state.get_data()
    doctor = await Doctor.objects.aget(telegram_id=callback.from_user.id)
    protocol_data['doctor_id'] = doctor.id
    first_take = protocol_data['first_take']
    period = protocol_data['period']
    
    timedelta_calendar = get_timedelta_calendar(first_take, period)
    protocol_data['reception_calendar'] = timedelta_calendar
    protocol_data['notificatons_calendar'] = timedelta_calendar
    protocol_data['last_take'] = first_take + timedelta(days=period)
    
    protocol_create_schema = ProtocolCreateSchema(**protocol_data)
    protocol = await Protocol.objects.acreate(**protocol_create_schema.model_dump())
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=f'{config.QR_CODE_API_GENERATOR_URL}{config.BOT_LINK}?start={protocol.id}',
        caption='–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω! <b>QR-–∫–æ–¥</b>:',
        parse_mode='HTML',
        reply_markup=get_reply_keyboard(
            buttons=('–ú–µ–Ω—é üìÅ', '–°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ üìù')
        )
    )
    await state.clear()
    
    
@router.callback_query(F.data == 'add_drug')
async def add_drug_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞') 
    await state.set_state(ProtocolState.drugs)
    
    
async def send_finish_protocol_message(
    message: types.Message,
    text: str = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    parse_mode: str = 'HTML'
):
    await message.answer(
        text,
        reply_markup=get_inline_keyboard(
            buttons={
                '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª üßæ': 'create_protocol',
                '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç üíä': 'add_drug',
            }
        ),
        parse_mode=parse_mode
    )
   
    
@router.callback_query(F.data.startswith('complete_protocol_'))
async def complete_protocol(callback: types.CallbackQuery):
    protocol_id = int(callback.data.split('_')[-1])
    now = timezone.now()
    current_date = now.date()
    
    protocol = await Protocol.objects.aget(id=protocol_id)
    protocol.reception_calendar.update({current_date.strftime('%d.%m.%Y'): True})
    await sync_to_async(protocol.save)()
    
    await callback.message.edit_text('–ü—Ä–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ')
    
    
