import loguru
from aiogram import types, F, Router
from aiogram.filters import StateFilter, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from asgiref.sync import sync_to_async

from keyboards.inline import get_inline_keyboard
from keyboards.reply import reply_keyboard_remove, get_reply_keyboard
from schemas.doctor import DoctorCreateSchema
from web.doctors.models import Doctor

router = Router()


class DoctorState(StatesGroup):
    fio = State()


@router.message(
    StateFilter('*'),
    or_f(Command('cancel'), (F.text.lower() == '–æ—Ç–º–µ–Ω–∞ ‚ùå'))
)
async def cancel_handler(
        message: types.Message,
        state: FSMContext,
):
    await message.answer(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
        reply_markup=reply_keyboard_remove,
    )
    await state.clear()


@router.message(DoctorState.fio, F.text)
async def process_fio(message: types.Message, state: FSMContext):
    fio = message.text
    if len(fio) > 150:
        return await message.answer('–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤')
    
    doctor_create_schema = DoctorCreateSchema(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        fio=fio
    )
    await Doctor.objects.acreate(**doctor_create_schema.model_dump())
    await message.answer(
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
        reply_markup=get_reply_keyboard(
            buttons=('–ú–µ–Ω—é üìÅ', '–°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ üìù')
        )
    )
    
    await state.clear()
    